<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_sn_slack_int.SlackUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>A clone of the SlackUtil class from the OOB Slack app. Adding additional enhancements to it...</description>
        <name>SlackUtils</name>
        <script><![CDATA[var SlackUtils = Class.create();
SlackUtils.prototype = {
	initialize: function() {
	},
	
	generateResponse: function(message) {
		var error = {
			status: 500,
			message: 'Unsupported action'
		};
		var action = message.actions[0].value;
		var callbackId = message.callback_id;
		var table = callbackId.split('#')[0];
		var sysId = callbackId.split('#')[1];
		if (table == 'em_alert') {
			switch (action) {
				case 'acknowledge':
					return acknowledgeAlert();
				case 'close':
					return closeAlert();
				case 'createIncident':
					return createIncident();
				case 'maintenance':
					return maintenanceAlert();					
				default:
					error.message = 'Sorry, that was an unsupported action';
					throw error;
			}
		} else {
			error.message = 'Sorry, only support em_alert for now';
			throw error;
		}
		
		function acknowledgeAlert() {
			gs.info('acknowledgeAlert()');
			var alertGr = new GlideRecord('em_alert');
			alertGr.get(sysId);
			alertGr.acknowledged = true;
			alertGr.update();
			return responseMessage('acknowledged the alert');
		}
		
		function closeAlert() {
			var alertGr = new GlideRecord('em_alert');
			alertGr.get(sysId);
			alertGr.state = 'Closed';
			if (gs.getProperty('evt_mgmt.alert_ack_on_close') == 'true') { // if property is turned on
				alertGr.acknowledged = true;
			}
			alertGr.update();
			return responseMessage('closed the alert');
		}
		
		function createIncident() {
			var alertGr = new GlideRecord('em_alert');
			alertGr.get(sysId);
			global.EvtMgmtIncidentHandler.createIncident(alertGr, false);
			return responseMessage('opened an incident for the alert');
		}
		
		function maintenanceAlert() {
			gs.info('maintenanceAlert()');
			var alertGr = new GlideRecord('em_alert');
			alertGr.get(sysId);
			alertGr.maintenance = true;
			alertGr.update();
			return responseMessage('Alert is put in maintenance');
		}		
		
		function responseMessage(verboseAction) {
			var originalMessage = message.original_message;
			gs.info('trimButtons(message): ' + new global.JSON().encode(message));
			var attachments = originalMessage.attachments;
			var user = message.user.id;
			for (var i = 0; i < attachments.length; i++) {
				var attachment = attachments[i];
				if (!gs.nil(attachment.callback_id)) {
					attachment.actions = '';
					attachment.color = 'good';
					attachment.title = 'No action needed...';
					attachment.text = '<@' + user + '> ' + verboseAction;
					gs.info('Altered Message: ' + new global.JSON().encode(originalMessage));
					return originalMessage;
				}
			}
		}
	},
	
	htmlEscape : function(str) {
		return str
		.replace(/&/g, '&amp;')
		.replace(/</g, '&lt;')
		.replace(/>/g, '&gt;');
	},
	
	createAlertPayload : function(inputs, defaultFields) {
		var payload = this.createPayload(inputs, defaultFields);
		
		var alertId = inputs.record.sys_id;

		payload = this._addAffectedServicesInfo(alertId, payload);
		payload = this._addActionInfo(alertId, payload);

		
		return payload;
	},
	
	_addAffectedServicesInfo: function(alertId, payload) {
		var ciid = this._getCIFromAlert(alertId);		
		var serviceIds = this._getAffectedServices(ciid);
		
		if (serviceIds.lenght == 0)
			return;
		
		var serviceTextArr = [];
		
		for (var i=0; i<serviceIds.length; i++) {
			var serviceId = serviceIds[i];
			var gr = new GlideRecord("cmdb_ci_service");
			if (!gr.get(serviceId))
				continue;
			
			var serviceName = gr.name+'';
			var recordLink = gr.getLink();
			var url = gs.getProperty('glide.servlet.uri') + recordLink;
			var map_url = gs.getProperty('glide.servlet.uri') + "$sw_topology_map.do?sysparm_bsid=" + serviceId;
			serviceTextArr.push("<" + url + "|" + serviceName + ">" + " (<" + map_url + "|view map>)");
		}
		
		var serviceList = serviceTextArr.join(", ");
		
		payload.attachments.push({
			title: 'Affected Application Services',
			fallback: 'Affected Application Services',
			text: serviceList,
		});		
		
		return payload;
	},
	
	_getCIFromAlert: function(alertId) {
		var gr = new GlideRecord("em_alert");
		if (!gr.get(alertId))
			return;
		
		var ci = gr.cmdb_ci;
		if (gs.nil(ci))
			return;
		
		return ci.sys_id+'';
	},
	
	_getAffectedServices: function(ciid) {
		var serviceIDs = [];
		
		var gr = new GlideRecord("svc_ci_assoc");
		gr.addQuery("ci_id", ciid);
		gr.query();
		while (gr.next())
			serviceIDs.push(gr.service_id+'');
		
		return serviceIDs;
	},
	
	_addActionInfo: function(alertId, payload) {
		var actions = this._getActions(alertId, payload);
		
		if (actions.length == 0)
			return payload;
		
		payload.attachments.push({
			title: 'What do you want to do?',
			fallback: 'What do you want to do?',
			callback_id: 'em_alert#' + alertId,
			color: 'warning',
			attachment_type: 'default',
			actions: actions
		});
		
		return payload;
		
	},
	
	
	_getActions : function(alertId) {				
		var alertGr = new GlideRecord("em_alert");
		alertGr.get(alertId);
		
		var actions = [];
		
		var action = getAckAction(alertGr);
		if (!gs.nil(action))
			actions.push(action);

		action = getCloseAction(alertGr);
		if (!gs.nil(action))
			actions.push(action);		
		
		action = getMaintenanceAction(alertGr);
		if (!gs.nil(action))
			actions.push(action);			
		
		action = getincidentCreationAction(alertGr);
		if (!gs.nil(action))
			actions.push(action);			
		
		return actions;
		
		function getAckAction(alertGr) {
			if (alertGr.acknowledged == true)
				return;
			
			return {
						name: 'acknowledge',
						text: 'Acknowledge',
						value: 'acknowledge',
						style: 'primary',
						type: 'button'
					};
		}
		
		function getCloseAction(alertGr) {
			if (alertGr.state == "Closed")
				return;
			
			return {
						name: 'close',
						text: 'Close',
						value: 'close',
						type: 'button'
					};
		}	
		
		function getMaintenanceAction(alertGr) {
			if (alertGr.maintenance == true)
				return;
			
			return {
						name: 'maintenance',
						text: 'Maintenance',
						value: 'maintenance',
						style: 'primary',
						type: 'button'
					};
		}		
		
		function getincidentCreationAction(alertGr) {
			if (!gs.nil(alertGr.incident))
				return;
			
			return {
						name: 'createIncident',
						text: 'Create Incident',
						value: 'createIncident',
						style: 'danger',
						type: 'button'
					};
		}		
		
	},
	
	
	createPayload : function(inputs, defaultFields) {
		var payload = {};
		payload.text = this.htmlEscape(inputs.message);
		
		if (!gs.nil(inputs.channel.trim()))
			payload.channel = inputs.channel.trim();
		
		if (!gs.nil(inputs.icon.trim()))
			payload.icon_emoji = inputs.icon.trim();
		
		if (!gs.nil(inputs.icon_url.trim()))
			payload.icon_url = this.htmlEscape(inputs.icon_url.trim());
		
		if(!gs.nil(inputs.username.trim()))
			payload.username = inputs.username.trim();
		
		payload.attachments = [];
		
		var fields = [];
		var fieldsToSend = defaultFields.split(',');
		var _this = this;
		
		fieldsToSend.forEach(function (fieldName) {
			fieldName = fieldName.trim();
	
			var fieldValue = inputs.record.getDisplayValue(fieldName) || '';			
			var isShort = (fieldValue.length > 30 || fieldName == 'short_description') ? false : true;
			
			if (!gs.nil(fieldValue)){
				fieldValue = _this.htmlEscape(fieldValue);
				fields.push({
					"title":inputs.record[fieldName].getLabel(),
					"value":fieldValue,
					"short":isShort
				});
			}
			
		});
		
		var incidentNumber = inputs.record.getDisplayValue('number');
		var recordLink = inputs.record.getLink();
		var incidentLink = gs.getProperty('glide.servlet.uri') + recordLink;
		var incidentUrl = '<' + incidentLink + '|' + incidentNumber + '>';
		
		payload.attachments.push({
			text: incidentUrl,
			fallback: inputs.message,
			fields: fields
		});
		
		return payload;
	},
	
	type: 'SlackUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>aleck.lin</sys_created_by>
        <sys_created_on>2018-03-20 18:15:39</sys_created_on>
        <sys_id>b400791413099784ccd656e12244b082</sys_id>
        <sys_mod_count>54</sys_mod_count>
        <sys_name>SlackUtils</sys_name>
        <sys_package display_value="SN_Slack_Integration" source="x_snc_sn_slack_int">019fa11413099784ccd656e12244b09b</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="SN_Slack_Integration">019fa11413099784ccd656e12244b09b</sys_scope>
        <sys_update_name>sys_script_include_b400791413099784ccd656e12244b082</sys_update_name>
        <sys_updated_by>aleck.lin</sys_updated_by>
        <sys_updated_on>2021-01-14 22:06:28</sys_updated_on>
    </sys_script_include>
</record_update>
